name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-type-check:
    name: üîç Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check

  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps
        pip install -r requirements.txt
        
    - name: Build packages
      run: npm run build
      
    - name: Run tests
      run: npm run test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          apps/web/dist/
          packages/*/dist/

  python-tests:
    name: üêç Python Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run Python tests
      run: |
        cd tests
        python -m pytest -v --cov=../apps/api/src --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        flags: python

  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build for performance analysis
      run: npm run build
      
    - name: Analyze bundle size
      run: |
        echo "Bundle size analysis:"
        cd apps/web
        if [ -d "dist" ]; then
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5 "\t" $9}'
        else
          echo "No dist directory found"
        fi
        
    - name: Run performance tests
      run: |
        chmod +x ./scripts/performance-monitor.sh
        ./scripts/performance-monitor.sh
      
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run npm audit
      run: npm audit --audit-level moderate || echo "Audit completed with warnings"
      
    - name: Run Snyk security scan
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Skip Snyk if no token
      if: env.SNYK_TOKEN == ''
      run: echo "Skipping Snyk scan - no SNYK_TOKEN configured"

  deploy-preview:
    name: üöÄ Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build-and-test, python-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to preview environment
      run: |
        echo "üöÄ Deploying to preview environment..."
        echo "Preview URL would be generated here"
        
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Preview deployment ready! Check the deployment logs for details.'
          })